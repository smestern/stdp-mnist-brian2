import os
import numpy as np
import nevergrad as ng
import subprocess, shlex
import evaluation_n_2 as eval_n
import time
import shutil
import pickle
import pandas as pd

def call_RT(params, test_mode=False, SDTP_ALL_OFF=False):
    args = "python3 spiking_RT_refactor_conseq_with_experiments..py "
    for key, value in params.items():
        args += f"--{key} {str(value)} "
    
    if test_mode:
        args += "--test_mode 1 "
    else:
        args += "--test_mode 0 "

    if SDTP_ALL_OFF:
        args += " --SDTP_ALL_OFF 1"
    else:
        args += " --SDTP_ALL_OFF 0"

    args = shlex.split(args)
    subprocess.run(args, cwd=os.getcwd())

def remove_wd():
    try:
        shutil.rmtree(f"./E_TO_E_no_XE_400/SCAN/")
    except:
        pass

def error_func(params, i):
    remove_wd()
    #cal with params as args
    call_RT(params)
    #call again with test_mode = True
    call_RT(params, test_mode=True)
    #call the evaluation function
    error = eval_n.eval_results(path=f"/home/smestern/Dropbox/brian2_SDTP/stdp-mnist-brian2/E_TO_E_no_XE_400/SCAN/EXP_1_trial_0/activity/")
    #remove the working directory
    remove_wd()

    #call again with sdtp_all_off = True
    call_RT(params, SDTP_ALL_OFF=True)
    #call the evaluation function
    call_RT(params, test_mode=True, SDTP_ALL_OFF=True)
    #call the evaluation function
    error_off = eval_n.eval_results(path=f"/home/smestern/Dropbox/brian2_SDTP/stdp-mnist-brian2/E_TO_E_no_XE_400/SCAN/EXP_1_trial_0/activity/")


    return (1 - error[0].mean()), (error_off[0].mean())
    

def main():
    #make parameter space
    # _scale_XeAe = parser.add_argument('--scale_XeAe', type=float, default=78.)
    # _scale_AeAe = parser.add_argument('--scale_AeAe', type=float, default=1.)
    # _scale_AeAe_mute = parser.add_argument('--scale_AeAe_mute', type=float, default=50.)
    # _nu_pre_ee_post = parser.add_argument('--nu_pre_ee_post', type=float, default=0.0001)
    # _nu_post_ee_pre = parser.add_argument('--nu_post_ee_pre', type=float, default=0.01)
    # _test_mode = parser.add_argument('--test_mode', type=bool, default=True)
    param_space = ng.p.Dict(**{'scale_XeAe': ng.p.Scalar(lower=1, upper=100),
                             'scale_AeAe': ng.p.Scalar(lower=1, upper=100),'scale_AeAe_mute': ng.p.Scalar(lower=1, upper=100),
                             'nu_pre_ee_post': ng.p.Log(lower=1e-9, upper=1),'nu_post_ee_pre': ng.p.Log(lower=1e-9, upper=1),
                             'tc_theta': ng.p.Log(lower=1, upper=1e7),})
    #make optimizer
    #scrambled hammersley search, then TwoPointsDE
    ScrTWODE = ng.optimizers.Chaining([ng.optimizers.ScrHammersleySearch, ng.optimizers.TwoPointsDE], [20,])
    optimizer = ScrTWODE(parametrization=param_space, budget=30)
    results = []
    for _ in np.arange(20):
        start_time = time.time()
        points = optimizer.ask()
        error, sdtp_off_error = error_func(points.value, _)
        optimizer.tell(points, error)
        temp_results = {'error': 1 - np.copy(error), 'run_ttime': time.time() - start_time, "sdtp_off_error": np.copy(sdtp_off_error)}

        #load the metadata 
        metadata = pickle.load(open(\
            f"./E_TO_E_no_XE_400/SCAN/EXP_1_trial_0/metadata.pickle", "rb"))
        temp_results.update(metadata)
        temp_results.update(points.value)
        results.append(temp_results)
    
    #save the results to csv
    results = pd.DataFrame(results)
    results.to_csv(f"./E_TO_E_no_XE_400/SCAN/results.csv")
    print(optimizer )

if __name__ == "__main__":
    main()